#The Normal PDF
# Draw 100000 samples from Normal distribution with stds of interest: samples_std1, samples_std3, samples_std10

samples_std1=np.random.normal(20,1,100000)
samples_std3=np.random.normal(20,3,100000)
samples_std10=np.random.normal(20,10,100000)


# Make histograms
#Plot a histograms of each of the samples; for each, use 100 bins, also using the keyword arguments normed=True and histtype='step'. 
#The latter keyword argument makes the plot look much like the smooth theoretical PDF.
plt.hist(samples_std1,bins=100,normed=True, histtype='step')
plt.hist(samples_std3,bins=100,normed=True, histtype='step')
plt.hist(samples_std10,bins=100,normed=True, histtype='step')



# Make a legend, set limits and show plot
_ = plt.legend(('std = 1', 'std = 3', 'std = 10'))
plt.ylim(-0.01, 0.42)
plt.show()


#interpretaion - the different standard deviations result in PDFs of different widths. The peaks are all centered at the mean of 20.


#example Belmont Stakes
#data concerning the Belmont Stakes from the
#https://en.wikipedia.org/wiki/Belmont_Stakes

# Compute mean and standard deviation: mu, sigma

mu=np.mean(belmont_no_outliers)
sigma=np.std(belmont_no_outliers)

# Sample out of a normal distribution with this mu and sigma: samples
samples=np.random.normal(mu,sigma,10000)

# Get the CDF of the samples and of the data

x_theor, y_theor=ecdf(samples)
x,y=ecdf(belmont_no_outliers)

# Plot the CDFs and show the plot
_ = plt.plot(x_theor, y_theor)
_ = plt.plot(x, y, marker='.', linestyle='none')
_ = plt.xlabel('Belmont winning time (sec.)')
_ = plt.ylabel('CDF')
plt.show()
