#ECDF formula function 

def ecdf(data):
    """Compute ECDF for a one-dimensional array of measurements."""
    # Number of data points: n
    n= len(data)

    # x-data for the ECDF: x
    x= np.sort(data)

    # y-data for the ECDF: y
    y= np.arange(1, n+1)/n

    return x, y
    
# plot ECDF 
# dataset: versicolor_petal_length
import numpy as np
# Compute ECDF for versicolor data: x_vers, y_vers
x_vers, y_vers= ecdf(versicolor_petal_length)

# Generate plot
plt.plot(x_vers, y_vers,marker = '.',linestyle = 'none')

# Label the axes

plt.xlabel('petal_length')
plt.ylabel('ECDF')

# Display the plot
plt.show()

    
    
   #plot three ECDFs in one chart 
   # Compute ECDFs
x_set,y_set=ecdf(setosa_petal_length)
x_vers,y_vers=ecdf(versicolor_petal_length)
x_virg,y_virg=ecdf(virginica_petal_length)

# Plot all ECDFs on the same plot

_=plt.plot(x_set, y_set,marker='.', linestyle='none')
_=plt.plot(x_vers, y_vers,marker='.', linestyle='none')
_=plt.plot(x_virg, y_virg,marker='.', linestyle='none')
# Annotate the plot
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Display the plot
plt.show()




#example 2 : Sampling out of the Binomial distribution


# Take 10,000 samples out of the binomial distribution: n_defaults
n_defaults=np.random.binomial(n=100,p=0.05,size=10000)

# Compute CDF: x, y
x,y=ecdf(n_defaults)

# Plot the CDF with axis labels
plt.plot(x,y,marker = '.',linestyle = 'none')

plt.xlabel('sccuess number ')
plt.ylabel('CDF')
# Show the plot
plt.show()
